} else if (j == 2){
prediction <- predict_latent_densities(sim_results[[j]])
density_i <- cbind(inverse_clr_trafo(cbind("x" = prediction$x_grid,
"y" = prediction$clr_densities[,i])))
} else {
density_i <- cbind(sim_results[[j]]$densities[[i]])
}
cbind(density_i, "idx" = i, "type" = type_levels[j],
"m" = length(sim_results[[1]]$x_data))
})
do.call("rbind", density_data)
})
density_plot_data_list
density_plot_data<- do.call("rbind", density_plot_data_list)
density_plot_data$type <- factor(density_plot_data$type, levels = type_levels)
density_plot_data$idx <- factor(density_plot_data$idx)
density_plot_data$m <- factor(density_plot_data$m)
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") +
theme(legend.position = "none")
g3
density_plot_data
sim_results[[1]]$x_data
density_plot_data_list <- lapply(1:4, function(j){
n <- length(sim_results[[1]]$true_densities)
density_data <- lapply(1:n, function(i){
if(j == 1){
density_i <- cbind(sim_results[[j]]$true_densities[[i]])
} else if (j == 2){
prediction <- predict_latent_densities(sim_results[[j]])
density_i <- cbind(inverse_clr_trafo(cbind("x" = prediction$x_grid,
"y" = prediction$clr_densities[,i])))
} else {
density_i <- cbind(sim_results[[j]]$densities[[i]])
}
cbind(density_i, "idx" = i, "type" = type_levels[j],
"m" = length(sim_results[[i]]$x_data))
})
do.call("rbind", density_data)
})
density_plot_data_list <- lapply(1:4, function(j){
n <- length(sim_results[[1]]$true_densities)
density_data <- lapply(1:n, function(i){
if(j == 1){
density_i <- cbind(sim_results[[j]]$true_densities[[i]])
} else if (j == 2){
prediction <- predict_latent_densities(sim_results[[j]])
density_i <- cbind(inverse_clr_trafo(cbind("x" = prediction$x_grid,
"y" = prediction$clr_densities[,i])))
} else {
density_i <- cbind(sim_results[[j]]$densities[[i]])
}
cbind(density_i, "idx" = i, "type" = type_levels[j],
"m" = length(sim_results[[1]]$x_data[[i]]))
})
do.call("rbind", density_data)
})
density_plot_data<- do.call("rbind", density_plot_data_list)
density_plot_data$type <- factor(density_plot_data$type, levels = type_levels)
density_plot_data$idx <- factor(density_plot_data$idx)
density_plot_data$m <- factor(density_plot_data$m)
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") +
theme(legend.position = "none")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_discrete(rainbow(2)) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(rainbow(2)) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer("Pastel1") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer("Pastel2") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer("Set2") +
theme(legend.position = "right")
g3
density_plot_data$m
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer(palette = "Set2") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer(palette = "Pastel2") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer(palette = "Pastel1") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer(palette = "Paired") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_brewer(palette = "Accent") +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_discrete(palette = "Viridis", begin = 0.15, end = 0.9) +
theme(legend.position = "right")
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_discrete(values = c("blue", "lightblue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_discrete(c("blue", "lightblue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(c("blue", "lightblue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("blue", "lightblue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("darkblue", "blue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("purple", "blue")) +
theme(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("purple", "blue")) +
theme_bw(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("purple", "blue")) +
theme_void(legend.position = "right")
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("purple", "blue")) +
theme_void()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("purple", "blue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("gray", "blue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("gray", "purple")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("gray", "lightgreen")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("gray", "cadetblue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("darkgray", "cadetblue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("magenta", "cadetblue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("cornflowerblue", "cadetblue")) +
theme_bw()
g3
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("chocolate", "cadetblue")) +
theme_bw()
g3
################################################################################
plot_grid(g3, g2, g1, ncol = 1, align = "v", axis = "lr")
################################################################################
m <- 40
seed_i <- 1000 + i
set.seed(seed_i)
simulated_data <- simulate_data(n = 40, m = m)
source("../simulation/simulate_data.R")
source("../fit_density_pca.R")
source("../simulation/fit_pre_smooth_pca.R")
source("fit_density_fpca_qui.R")
simulated_data <- simulate_data(n = 40, m = m)
# keep for first half of densities only 20 observations
simulated_data$x_data[1:20] <- lapply(simulated_data$x_data[1:20], "[", 1:20)
# fit density pca using all three methods
pre_smooth_pca <- fit_pre_smooth_pca(simulated_data$x_data)
density_fpca_qui <- fit_density_fpca_qui(simulated_data$x_data)
x_data <- simulated_data$x_data
x_grid = seq(min(unlist(x_data)), max(unlist(x_data)), length = 200)
bw = (max(x_grid) - min(x_grid))/10
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
x_data
sample_size_large = 30
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
sapply(x_data, function(x) length(x) >= sample_size_large)
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
which_large_sample <- sapply(x_data, function(x) length(x) >= sample_size_large)
which(sapply(x_data, function(x) length(x) >= sample_size_large))
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
idx_large_sample <- which(sapply(x_data, function(x) length(x) >= sample_size_large))
# kernel density estimates
densities_estimated <- lapply(idx_large_sample, function(i){
density <- density(x_data[[i]], from = min(x_grid), to = max(x_grid),
kernel = "gaussian", bw,
n = length(x_grid))
data.frame("x" = density$x, "y" = density$y)
})
# transform the density functions into Hilbert space via centered log transformation
clr_densities_estimated <- lapply(densities_estimated, clr_trafo)
clr_densities_estimated_values <- lapply(clr_densities_estimated, function(dens) dens$y)
# functional principal component analysis
fpca.res <- fdapace::FPCA(Ly = clr_densities_estimated_values,
Lt = replicate(x_grid, n = length(clr_densities_estimated), simplify = FALSE),
optns = list(
error = TRUE, lean = TRUE, FVEthreshold = 1,
methodSelectK = 'FVE', plot = FALSE, useBinnedData = 'OFF'
))
source("fit_density_fpca_qui.R")
simulated_data <- simulate_data(n = 40, m = m)
# keep for first half of densities only 20 observations
simulated_data$x_data[1:20] <- lapply(simulated_data$x_data[1:20], "[", 1:20)
# fit density pca using all three methods
pre_smooth_pca <- fit_pre_smooth_pca(simulated_data$x_data)
density_fpca_qui <- fit_density_fpca_qui(simulated_data$x_data)
density_pca <- fit_density_pca(simulated_data$x_data, max_iter = 50)
sim_results <- list(simulated_data, density_pca, pre_smooth_pca, density_fpca_qui)
library(reshape2)
library(ggplot2)
library(cowplot)
source("../fit_density_pca.R")
type_levels <- c("oracle", "latent density",
"two-step, kernel density",
"density fpca Qui")
################################################################################
### make covariance plots
get_cov_from_pca <- function(pca){
pca$rotation%*%diag(pca$sdev^2)%*%t(pca$rotation)
}
cov_data_list <- lapply(1:4, function(i){
data.frame(expand.grid(sim_results[[i]]$x_grid, sim_results[[i]]$x_grid),
cov = melt(get_cov_from_pca(sim_results[[i]]$pca))[,3],
type = type_levels[i])
})
cov_plot_data <- do.call("rbind", cov_data_list)
cov_plot_data$type <- factor(cov_plot_data$type, levels = type_levels)
g1 <- ggplot(data = cov_plot_data, aes(x = Var1, y = Var2, fill = cov)) + geom_raster() +
coord_equal() + xlab("x") + ylab("x") +
scale_fill_gradientn(colors = c("blue", "white", "red", "darkred")) +
facet_grid(cols = vars(type)) + theme(strip.background = element_blank(), strip.text = element_blank())
g1
mean_plot_data_list <- lapply(1:4, function(i){
mean <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$center,
g = "mean", type =  type_levels[i])
pc_1  <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$rotation[,1])
pc_1[,2] <- sign(pc_1[50,2])*pc_1[,2]/L_2_norm(pc_1)
pc_1 <- cbind(pc_1, g = "PC 1", type = type_levels[i])
pc_2  <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$rotation[,2])
pc_2[,2] <- sign(pc_2[100,2])*pc_2[,2]/L_2_norm(pc_2)
pc_2 <- cbind(pc_2, g = "PC 2", type = type_levels[i])
rbind(mean, pc_1, pc_2)
})
mean_plot_data <- do.call("rbind", mean_plot_data_list)
mean_plot_data$type <- factor(mean_plot_data$type, levels = type_levels)
g2 <- ggplot(data = mean_plot_data, aes(x = x, y = y, group = g, col = g)) + geom_path(linewidth = 1) +
facet_grid(cols = vars(type)) + scale_color_manual(values = c("black", "red", "blue")) +
theme(strip.background = element_blank(), strip.text = element_blank()) + ylab("g(x)")
g2
density_plot_data_list <- lapply(1:4, function(j){
n <- length(sim_results[[1]]$true_densities)
density_data <- lapply(1:n, function(i){
if(j == 1){
density_i <- cbind(sim_results[[j]]$true_densities[[i]])
} else if (j == 2){
prediction <- predict_latent_densities(sim_results[[j]])
density_i <- cbind(inverse_clr_trafo(cbind("x" = prediction$x_grid,
"y" = prediction$clr_densities[,i])))
} else {
density_i <- cbind(sim_results[[j]]$densities[[i]])
}
cbind(density_i, "idx" = i, "type" = type_levels[j],
"m" = length(sim_results[[1]]$x_data[[i]]))
})
do.call("rbind", density_data)
})
fpca.den.fam <- fpca2DenFam(fpca.res, control = list(num.k = 10))
checkDenFamNumeric(fpca.den.fam)
checkDenFamGrident(fpca.den.fam)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_MLE"),
control = list(
num.k = 'AIC',
return.scale = 'parameter'
)
)
mat.obsv = x_data[!idx_large_sample]
debugonce(fpcaEsti)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_MLE"),
control = list(
num.k = 'AIC',
return.scale = 'parameter'
)
)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_MLE"),
control = list(
num.k = 'AIC', max.k = 10,
method = 'LBFGS', return.scale = 'parameter'
)
)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_MLE"),
control = list(
num.k = 10, max.k = 10,
method = 'LBFGS', return.scale = 'parameter'
)
)
?fpcaEsti
??fpcaEsti
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_BLUP"),
control = list(
num.k = 10, max.k = 10,
method = 'LBFGS', return.scale = 'parameter'
)
)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_BLUP"),
control = list(
max.k = 10,
method = 'LBFGS', return.scale = 'origin'
)
)
debugonce(fpcaEsti)
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!idx_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_BLUP"),
control = list(
method = 'LBFGS', return.scale = 'origin'
)
)
control
lbl.num.k
df.idx$method.num.k
as.character(control$num.k)
df.idx$method.num.k <- as.character(control$num.k)
df.idx$method.num.k <- control$num.k
df.idx$method.num.k
df.idx
rep(seq_along(mat.obsv)
times = length(esti.method)
rep(seq_along(mat.obsv),
times = length(esti.method))
seq_along(mat.obsv)
mat.obsv
x_data[!idx_large_sample]
x_data[[!idx_large_sample]]
!idx_large_sample
idx_large_sample
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
which_large_sample <- sapply(x_data, function(x) length(x) >= sample_size_large)
###############
# functional component analysis computed as in the R-package densityPCA
################
# use only densities with many observations for pca computation
is_large_sample <- sapply(x_data, function(x) length(x) >= sample_size_large)
# kernel density estimates
densities_estimated <- lapply(which(is_large_sample), function(i){
density <- density(x_data[[i]], from = min(x_grid), to = max(x_grid),
kernel = "gaussian", bw,
n = length(x_grid))
data.frame("x" = density$x, "y" = density$y)
})
# transform the density functions into Hilbert space via centered log transformation
clr_densities_estimated <- lapply(densities_estimated, clr_trafo)
clr_densities_estimated_values <- lapply(clr_densities_estimated, function(dens) dens$y)
# functional principal component analysis
fpca.res <- fdapace::FPCA(Ly = clr_densities_estimated_values,
Lt = replicate(x_grid, n = length(clr_densities_estimated), simplify = FALSE),
optns = list(
error = TRUE, lean = TRUE, FVEthreshold = 1,
methodSelectK = 'FVE', plot = FALSE, useBinnedData = 'OFF'
))
pca <- list(sdev = fpca.res$lambda,
rotation = fpca.res$phi,
center = fpca.res$mu)
# reconstruct the densities with small sample size
fpca.den.fam <- fpca2DenFam(fpca.res, control = list(num.k = 10))
x_data[!is_large_sample]
ls.fpca.esti <- fpcaEsti(
mat.obsv = x_data[!is_large_sample],
fpca.res = fpca.res,
esti.method = c("FPCA_MLE"),
control = list(num.k = "AIC",
method = 'LBFGS', return.scale = 'origin'
)
)
ls.fpca.esti
ls.fpca.esti$res
matplot(ls.fpca.esti$res)
matplot(ls.fpca.esti$res, type = "l")
matplot(t(ls.fpca.esti$res), type = "l")
ls.fpca.esti
x_grid
clr_densities_estimated_small <- lapply(1:nrow(ls.fpca.esti$res), function(i){
data.frame("x" = ls.fpca.esti$grid, "y" = ls.fpca.esti$res[i,])
})
clr_densities_estimated_small
source("fit_density_fpca_qui.R")
density_fpca_qui <- fit_density_fpca_qui(simulated_data$x_data)
sim_results <- list(simulated_data, density_pca, pre_smooth_pca, density_fpca_qui)
type_levels <- c("oracle", "latent density",
"two-step, \nkernel density",
"two-step, \ndensity fpca Qui")
################################################################################
### make covariance plots
get_cov_from_pca <- function(pca){
pca$rotation%*%diag(pca$sdev^2)%*%t(pca$rotation)
}
cov_data_list <- lapply(1:4, function(i){
data.frame(expand.grid(sim_results[[i]]$x_grid, sim_results[[i]]$x_grid),
cov = melt(get_cov_from_pca(sim_results[[i]]$pca))[,3],
type = type_levels[i])
})
cov_plot_data <- do.call("rbind", cov_data_list)
cov_plot_data$type <- factor(cov_plot_data$type, levels = type_levels)
g1 <- ggplot(data = cov_plot_data, aes(x = Var1, y = Var2, fill = cov)) + geom_raster() +
coord_equal() + xlab("x") + ylab("x") +
scale_fill_gradientn(colors = c("blue", "white", "red", "darkred")) +
facet_grid(cols = vars(type)) + theme(strip.background = element_blank(), strip.text = element_blank())
g1
mean_plot_data_list <- lapply(1:4, function(i){
mean <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$center,
g = "mean", type =  type_levels[i])
pc_1  <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$rotation[,1])
pc_1[,2] <- sign(pc_1[50,2])*pc_1[,2]/L_2_norm(pc_1)
pc_1 <- cbind(pc_1, g = "PC 1", type = type_levels[i])
pc_2  <- data.frame("x" = sim_results[[i]]$x_grid, y = sim_results[[i]]$pca$rotation[,2])
pc_2[,2] <- sign(pc_2[100,2])*pc_2[,2]/L_2_norm(pc_2)
pc_2 <- cbind(pc_2, g = "PC 2", type = type_levels[i])
rbind(mean, pc_1, pc_2)
})
mean_plot_data <- do.call("rbind", mean_plot_data_list)
mean_plot_data$type <- factor(mean_plot_data$type, levels = type_levels)
g2 <- ggplot(data = mean_plot_data, aes(x = x, y = y, group = g, col = g)) + geom_path(linewidth = 1) +
facet_grid(cols = vars(type)) + scale_color_manual(values = c("black", "red", "blue")) +
theme(strip.background = element_blank(), strip.text = element_blank()) + ylab("g(x)")
g2
density_plot_data_list <- lapply(1:4, function(j){
n <- length(sim_results[[1]]$true_densities)
density_data <- lapply(1:n, function(i){
if(j == 1){
density_i <- cbind(sim_results[[j]]$true_densities[[i]])
} else if (j == 2){
prediction <- predict_latent_densities(sim_results[[j]])
density_i <- cbind(inverse_clr_trafo(cbind("x" = prediction$x_grid,
"y" = prediction$clr_densities[,i])))
} else {
density_i <- cbind(sim_results[[j]]$densities[[i]])
}
cbind(density_i, "idx" = i, "type" = type_levels[j],
"m" = length(sim_results[[1]]$x_data[[i]]))
})
do.call("rbind", density_data)
})
density_plot_data<- do.call("rbind", density_plot_data_list)
density_plot_data$type <- factor(density_plot_data$type, levels = type_levels)
density_plot_data$idx <- factor(density_plot_data$idx)
density_plot_data$m <- factor(density_plot_data$m)
g3 <- ggplot(data = density_plot_data, aes(x = x, y = y, group = idx, color = m)) + geom_path() +
facet_grid(cols = vars(type)) + ylab("density") + scale_color_manual(values = c("chocolate", "cadetblue")) +
theme_bw()
g3
